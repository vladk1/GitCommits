# Getting most popular commits after version bump
p: Project = input;
countsBump: output top(10) of string weight int;
countFixs: output top(10) of string weight int;
foundFixCommits: output top(20) of string weight int;

fixsCount := 0;

MAX_LOOK_AHEAD_COMMITS := 2;
isbumpversion := false;
bump_date := now ();

filterTopics: set of string;
add(filterTopics, "software development");
add(filterTopics, "frameworks");

programmingLanguages: map[int] of string;

IsBumpVersion := function(commit_log: string): bool {
#    "bump.*version"
    return (match("bump", commit_log) && match("version", commit_log));
};

IsFixWithinGoodTime := function(commit_time: time, bump_time: time): bool {
#  roughly a week
    return (dayofyear(commit_time) - dayofyear(bump_time) < 7);
};

CheckNextCommitsAfterBump := function(commit_log: string, commit_date: time, bump_date: time): bool {
	if (!IsBumpVersion(commit_log) && isfixingrevision(commit_log) 
	        && fixsCount<MAX_LOOK_AHEAD_COMMITS && IsFixWithinGoodTime(commit_date, bump_date)) {
#	    Hence is fix commit
        foreach (j: int; def(programmingLanguages[j])) {
            foundFixCommits << programmingLanguages[j] weight 1;
        }
		fixsCount++;
	} else {
		fixsCount=0;
		return false;
	}
	return true;
};

visit(p, visitor {
    before node: Project -> {
        clear(programmingLanguages);
        exists (i: int; contains(filterTopics, node.topics[i])) {
            foreach (j: int; def(node.programming_languages[j])) {
                programmingLanguages[j] = node.programming_languages[j];
            }
        }
        
    }
    before node: Revision -> {
       if (isbumpversion) {
           isbumpversion = CheckNextCommitsAfterBump(node.log, node.commit_date, bump_date);
       }
	   if (IsBumpVersion(node.log)) {
	        foreach (j: int; def(programmingLanguages[j])) {
	            countsBump << programmingLanguages[j] weight 1;
	        }
	   	    isbumpversion = true;
	   	    bump_date = node.commit_date;
	   }
    }
});